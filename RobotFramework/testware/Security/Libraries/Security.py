# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Security')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Security')
    _Security = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Security', [dirname(__file__)])
        except ImportError:
            import _Security
            return _Security
        try:
            _mod = imp.load_module('_Security', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Security = swig_import_helper()
    del swig_import_helper
else:
    import _Security
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Security.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Security.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Security.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Security.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Security.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Security.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Security.SwigPyIterator_copy(self)

    def next(self):
        return _Security.SwigPyIterator_next(self)

    def __next__(self):
        return _Security.SwigPyIterator___next__(self)

    def previous(self):
        return _Security.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Security.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Security.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Security.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Security.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Security.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Security.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Security.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Security.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Security.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Security.vectori___nonzero__(self)

    def __bool__(self):
        return _Security.vectori___bool__(self)

    def __len__(self):
        return _Security.vectori___len__(self)

    def __getslice__(self, i, j):
        return _Security.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Security.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Security.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Security.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Security.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Security.vectori___setitem__(self, *args)

    def pop(self):
        return _Security.vectori_pop(self)

    def append(self, x):
        return _Security.vectori_append(self, x)

    def empty(self):
        return _Security.vectori_empty(self)

    def size(self):
        return _Security.vectori_size(self)

    def swap(self, v):
        return _Security.vectori_swap(self, v)

    def begin(self):
        return _Security.vectori_begin(self)

    def end(self):
        return _Security.vectori_end(self)

    def rbegin(self):
        return _Security.vectori_rbegin(self)

    def rend(self):
        return _Security.vectori_rend(self)

    def clear(self):
        return _Security.vectori_clear(self)

    def get_allocator(self):
        return _Security.vectori_get_allocator(self)

    def pop_back(self):
        return _Security.vectori_pop_back(self)

    def erase(self, *args):
        return _Security.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _Security.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Security.vectori_push_back(self, x)

    def front(self):
        return _Security.vectori_front(self)

    def back(self):
        return _Security.vectori_back(self)

    def assign(self, n, x):
        return _Security.vectori_assign(self, n, x)

    def resize(self, *args):
        return _Security.vectori_resize(self, *args)

    def insert(self, *args):
        return _Security.vectori_insert(self, *args)

    def reserve(self, n):
        return _Security.vectori_reserve(self, n)

    def capacity(self):
        return _Security.vectori_capacity(self)
    __swig_destroy__ = _Security.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _Security.vectori_swigregister
vectori_swigregister(vectori)

LogLevel_LERROR = _Security.LogLevel_LERROR
LogLevel_LWARNING = _Security.LogLevel_LWARNING
LogLevel_LDEBUG = _Security.LogLevel_LDEBUG
LogLevel_LVERBOSE = _Security.LogLevel_LVERBOSE

def logLevelToString(logLevel):
    return _Security.logLevelToString(logLevel)
logLevelToString = _Security.logLevelToString

def getDate():
    return _Security.getDate()
getDate = _Security.getDate

def parseFuncName(longFunc, shortFunc):
    return _Security.parseFuncName(longFunc, shortFunc)
parseFuncName = _Security.parseFuncName

def setThreadName(tid, name):
    return _Security.setThreadName(tid, name)
setThreadName = _Security.setThreadName

def getThreadName(tid):
    return _Security.getThreadName(tid)
getThreadName = _Security.getThreadName
class TextFileLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFileLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextFileLogger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_Security.TextFileLogger_getInstance)
    else:
        getInstance = _Security.TextFileLogger_getInstance
    __swig_destroy__ = _Security.delete_TextFileLogger
    __del__ = lambda self: None

    def setLogLevel(self, logLevel):
        return _Security.TextFileLogger_setLogLevel(self, logLevel)

    def setLogFilename(self, name):
        return _Security.TextFileLogger_setLogFilename(self, name)

    def getLogLevel(self):
        return _Security.TextFileLogger_getLogLevel(self)

    def getLogFilename(self):
        return _Security.TextFileLogger_getLogFilename(self)

    def writeLogMessage(self, ss):
        return _Security.TextFileLogger_writeLogMessage(self, ss)

    def enableStdOut(self, enable):
        return _Security.TextFileLogger_enableStdOut(self, enable)

    def stdoutEnabled(self):
        return _Security.TextFileLogger_stdoutEnabled(self)

    def setOpenMode(self, mode):
        return _Security.TextFileLogger_setOpenMode(self, mode)
TextFileLogger_swigregister = _Security.TextFileLogger_swigregister
TextFileLogger_swigregister(TextFileLogger)

def TextFileLogger_getInstance():
    return _Security.TextFileLogger_getInstance()
TextFileLogger_getInstance = _Security.TextFileLogger_getInstance

class ILibUsb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILibUsb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILibUsb, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Security.delete_ILibUsb
    __del__ = lambda self: None

    def initialize(self, context):
        return _Security.ILibUsb_initialize(self, context)

    def setDebug(self, context, level):
        return _Security.ILibUsb_setDebug(self, context, level)

    def openDeviceWithVidPid(self, context, vendorId, productId):
        return _Security.ILibUsb_openDeviceWithVidPid(self, context, vendorId, productId)

    def isKernelDriverActive(self, handle, interfaceNumber):
        return _Security.ILibUsb_isKernelDriverActive(self, handle, interfaceNumber)

    def detachKernelDriver(self, handle, interfaceNumber):
        return _Security.ILibUsb_detachKernelDriver(self, handle, interfaceNumber)

    def claimInterface(self, handle, interfaceNumber):
        return _Security.ILibUsb_claimInterface(self, handle, interfaceNumber)

    def bulkTransfer(self, handle, endpoint, data, length, actualLength, timeout):
        return _Security.ILibUsb_bulkTransfer(self, handle, endpoint, data, length, actualLength, timeout)

    def releaseInterface(self, handle, interfaceNumber):
        return _Security.ILibUsb_releaseInterface(self, handle, interfaceNumber)

    def getErrorMessage(self, errorCode):
        return _Security.ILibUsb_getErrorMessage(self, errorCode)

    def close(self, handle):
        return _Security.ILibUsb_close(self, handle)

    def exit(self, context):
        return _Security.ILibUsb_exit(self, context)
ILibUsb_swigregister = _Security.ILibUsb_swigregister
ILibUsb_swigregister(ILibUsb)

class NonCopyable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonCopyable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonCopyable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
NonCopyable_swigregister = _Security.NonCopyable_swigregister
NonCopyable_swigregister(NonCopyable)

ENDPOINTS_IN_MAIN = _Security.ENDPOINTS_IN_MAIN
ENDPOINTS_IN_SECONDARY = _Security.ENDPOINTS_IN_SECONDARY
class UsbConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UsbConnection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Security.new_UsbConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Security.delete_UsbConnection
    __del__ = lambda self: None

    def createContext(self):
        return _Security.UsbConnection_createContext(self)

    def openConnection(self):
        return _Security.UsbConnection_openConnection(self)

    def sendCommand(self, command):
        return _Security.UsbConnection_sendCommand(self, command)

    def getResponse(self, *args):
        return _Security.UsbConnection_getResponse(self, *args)

    def closeConnection(self):
        return _Security.UsbConnection_closeConnection(self)

    def isConnected(self):
        return _Security.UsbConnection_isConnected(self)
UsbConnection_swigregister = _Security.UsbConnection_swigregister
UsbConnection_swigregister(UsbConnection)
cvar = _Security.cvar
TIMEOUT_MILLISECONDS = cvar.TIMEOUT_MILLISECONDS

class FileManip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileManip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileManip, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Security.delete_FileManip
    __del__ = lambda self: None
    if _newclass:
        getFileSizeInBytes = staticmethod(_Security.FileManip_getFileSizeInBytes)
    else:
        getFileSizeInBytes = _Security.FileManip_getFileSizeInBytes

    def processBinFileChunk(self, fileName, chunkSize):
        return _Security.FileManip_processBinFileChunk(self, fileName, chunkSize)

    def processBuffer(self, buffer):
        return _Security.FileManip_processBuffer(self, buffer)

    def __init__(self):
        this = _Security.new_FileManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FileManip_swigregister = _Security.FileManip_swigregister
FileManip_swigregister(FileManip)

def FileManip_getFileSizeInBytes(filename):
    return _Security.FileManip_getFileSizeInBytes(filename)
FileManip_getFileSizeInBytes = _Security.FileManip_getFileSizeInBytes

class MseCommandBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MseCommandBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MseCommandBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Security.new_MseCommandBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Security.delete_MseCommandBase
    __del__ = lambda self: None

    def execute(self, usbConnection):
        return _Security.MseCommandBase_execute(self, usbConnection)
MseCommandBase_swigregister = _Security.MseCommandBase_swigregister
MseCommandBase_swigregister(MseCommandBase)

HashCode_MD5 = _Security.HashCode_MD5
HashCode_SHA_1 = _Security.HashCode_SHA_1
HashCode_SHA_224 = _Security.HashCode_SHA_224
HashCode_SHA_256 = _Security.HashCode_SHA_256
HashCode_SHA_348 = _Security.HashCode_SHA_348
HashCode_SHA_512 = _Security.HashCode_SHA_512
HashCode_MD5_SHA1 = _Security.HashCode_MD5_SHA1
HashCode_SHA3_224 = _Security.HashCode_SHA3_224
HashCode_SHA3_256 = _Security.HashCode_SHA3_256
HashCode_SHA3_384 = _Security.HashCode_SHA3_384
HashCode_SHA3_512 = _Security.HashCode_SHA3_512
HashCode_SHAKE_128 = _Security.HashCode_SHAKE_128
HashCode_SHAKE_256 = _Security.HashCode_SHAKE_256
class HashCommands(MseCommandBase, FileManip):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase, FileManip]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashCommands, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase, FileManip]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashCommands, name)
    __repr__ = _swig_repr

    def __init__(self, libUsb):
        this = _Security.new_HashCommands(libUsb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Security.delete_HashCommands
    __del__ = lambda self: None

    def beginTransaction(self, hashCode):
        return _Security.HashCommands_beginTransaction(self, hashCode)

    def endTransaction(self):
        return _Security.HashCommands_endTransaction(self)

    def hashUpdate(self, fileName, chunkSize):
        return _Security.HashCommands_hashUpdate(self, fileName, chunkSize)

    def processBuffer(self, buffer):
        return _Security.HashCommands_processBuffer(self, buffer)
HashCommands_swigregister = _Security.HashCommands_swigregister
HashCommands_swigregister(HashCommands)

class MseCommandsFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MseCommandsFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MseCommandsFactory, name)
    __repr__ = _swig_repr
    if _newclass:
        createClearLcmCommand = staticmethod(_Security.MseCommandsFactory_createClearLcmCommand)
    else:
        createClearLcmCommand = _Security.MseCommandsFactory_createClearLcmCommand
    if _newclass:
        createGetFWVersionCommand = staticmethod(_Security.MseCommandsFactory_createGetFWVersionCommand)
    else:
        createGetFWVersionCommand = _Security.MseCommandsFactory_createGetFWVersionCommand
    if _newclass:
        createWriteLcmCommand = staticmethod(_Security.MseCommandsFactory_createWriteLcmCommand)
    else:
        createWriteLcmCommand = _Security.MseCommandsFactory_createWriteLcmCommand
    if _newclass:
        createSetFrequencyCommand = staticmethod(_Security.MseCommandsFactory_createSetFrequencyCommand)
    else:
        createSetFrequencyCommand = _Security.MseCommandsFactory_createSetFrequencyCommand
    if _newclass:
        createLcmPowerCommand = staticmethod(_Security.MseCommandsFactory_createLcmPowerCommand)
    else:
        createLcmPowerCommand = _Security.MseCommandsFactory_createLcmPowerCommand
    if _newclass:
        createHashCommand = staticmethod(_Security.MseCommandsFactory_createHashCommand)
    else:
        createHashCommand = _Security.MseCommandsFactory_createHashCommand

    def __init__(self):
        this = _Security.new_MseCommandsFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Security.delete_MseCommandsFactory
    __del__ = lambda self: None
MseCommandsFactory_swigregister = _Security.MseCommandsFactory_swigregister
MseCommandsFactory_swigregister(MseCommandsFactory)

def MseCommandsFactory_createClearLcmCommand(linesToClear):
    return _Security.MseCommandsFactory_createClearLcmCommand(linesToClear)
MseCommandsFactory_createClearLcmCommand = _Security.MseCommandsFactory_createClearLcmCommand

def MseCommandsFactory_createGetFWVersionCommand():
    return _Security.MseCommandsFactory_createGetFWVersionCommand()
MseCommandsFactory_createGetFWVersionCommand = _Security.MseCommandsFactory_createGetFWVersionCommand

def MseCommandsFactory_createWriteLcmCommand(dataToWrite):
    return _Security.MseCommandsFactory_createWriteLcmCommand(dataToWrite)
MseCommandsFactory_createWriteLcmCommand = _Security.MseCommandsFactory_createWriteLcmCommand

def MseCommandsFactory_createSetFrequencyCommand(frequency):
    return _Security.MseCommandsFactory_createSetFrequencyCommand(frequency)
MseCommandsFactory_createSetFrequencyCommand = _Security.MseCommandsFactory_createSetFrequencyCommand

def MseCommandsFactory_createLcmPowerCommand(turnOn):
    return _Security.MseCommandsFactory_createLcmPowerCommand(turnOn)
MseCommandsFactory_createLcmPowerCommand = _Security.MseCommandsFactory_createLcmPowerCommand

def MseCommandsFactory_createHashCommand(libUsb=None):
    return _Security.MseCommandsFactory_createHashCommand(libUsb)
MseCommandsFactory_createHashCommand = _Security.MseCommandsFactory_createHashCommand

class MseCommandsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MseCommandsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MseCommandsManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getCurrentInstance = staticmethod(_Security.MseCommandsManager_getCurrentInstance)
    else:
        getCurrentInstance = _Security.MseCommandsManager_getCurrentInstance
    if _newclass:
        dispose = staticmethod(_Security.MseCommandsManager_dispose)
    else:
        dispose = _Security.MseCommandsManager_dispose

    def initialize(self):
        return _Security.MseCommandsManager_initialize(self)

    def close(self):
        return _Security.MseCommandsManager_close(self)

    def writeCharacters(self, writeLcmCommand):
        return _Security.MseCommandsManager_writeCharacters(self, writeLcmCommand)

    def clearAllLines(self, clearLcmCommand):
        return _Security.MseCommandsManager_clearAllLines(self, clearLcmCommand)

    def setFrequency(self, setFrequencyCommand):
        return _Security.MseCommandsManager_setFrequency(self, setFrequencyCommand)

    def turnLcmOff(self, lcmPowerCommand):
        return _Security.MseCommandsManager_turnLcmOff(self, lcmPowerCommand)

    def getFirmwareVersion(self, getFirmwareVersionCommand):
        return _Security.MseCommandsManager_getFirmwareVersion(self, getFirmwareVersionCommand)
    __swig_destroy__ = _Security.delete_MseCommandsManager
    __del__ = lambda self: None
MseCommandsManager_swigregister = _Security.MseCommandsManager_swigregister
MseCommandsManager_swigregister(MseCommandsManager)

def MseCommandsManager_getCurrentInstance(libUsb=None):
    return _Security.MseCommandsManager_getCurrentInstance(libUsb)
MseCommandsManager_getCurrentInstance = _Security.MseCommandsManager_getCurrentInstance

def MseCommandsManager_dispose():
    return _Security.MseCommandsManager_dispose()
MseCommandsManager_dispose = _Security.MseCommandsManager_dispose

class MseSecurity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MseSecurity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MseSecurity, name)
    __repr__ = _swig_repr

    def __init__(self, libUsb=None):
        this = _Security.new_MseSecurity(libUsb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Security.delete_MseSecurity
    __del__ = lambda self: None

    def encrypt(self, data):
        return _Security.MseSecurity_encrypt(self, data)

    def decrypt(self, data):
        return _Security.MseSecurity_decrypt(self, data)

    def getHashFromFile(self, file, hashCode):
        return _Security.MseSecurity_getHashFromFile(self, file, hashCode)
MseSecurity_swigregister = _Security.MseSecurity_swigregister
MseSecurity_swigregister(MseSecurity)

class ClearLcmCommand(MseCommandBase):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearLcmCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearLcmCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ClearLcmCommand_swigregister = _Security.ClearLcmCommand_swigregister
ClearLcmCommand_swigregister(ClearLcmCommand)

class GetMseFirmwareVersionCommand(MseCommandBase):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetMseFirmwareVersionCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetMseFirmwareVersionCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
GetMseFirmwareVersionCommand_swigregister = _Security.GetMseFirmwareVersionCommand_swigregister
GetMseFirmwareVersionCommand_swigregister(GetMseFirmwareVersionCommand)

class LcmPowerCommand(MseCommandBase):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LcmPowerCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LcmPowerCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
LcmPowerCommand_swigregister = _Security.LcmPowerCommand_swigregister
LcmPowerCommand_swigregister(LcmPowerCommand)

class SetMcuFrequencyCommand(MseCommandBase):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMcuFrequencyCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMcuFrequencyCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SetMcuFrequencyCommand_swigregister = _Security.SetMcuFrequencyCommand_swigregister
SetMcuFrequencyCommand_swigregister(SetMcuFrequencyCommand)

class WriteLcmCommand(MseCommandBase):
    __swig_setmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteLcmCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MseCommandBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriteLcmCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
WriteLcmCommand_swigregister = _Security.WriteLcmCommand_swigregister
WriteLcmCommand_swigregister(WriteLcmCommand)

class SecurityController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getCurrentInstance = staticmethod(_Security.SecurityController_getCurrentInstance)
    else:
        getCurrentInstance = _Security.SecurityController_getCurrentInstance
    if _newclass:
        dispose = staticmethod(_Security.SecurityController_dispose)
    else:
        dispose = _Security.SecurityController_dispose

    def encrypt(self, data):
        return _Security.SecurityController_encrypt(self, data)

    def decrypt(self, data):
        return _Security.SecurityController_decrypt(self, data)

    def getHashFromFile(self, file, hashCode):
        return _Security.SecurityController_getHashFromFile(self, file, hashCode)
    __swig_destroy__ = _Security.delete_SecurityController
    __del__ = lambda self: None
SecurityController_swigregister = _Security.SecurityController_swigregister
SecurityController_swigregister(SecurityController)

def SecurityController_getCurrentInstance(cryptographyServices=None):
    return _Security.SecurityController_getCurrentInstance(cryptographyServices)
SecurityController_getCurrentInstance = _Security.SecurityController_getCurrentInstance

def SecurityController_dispose():
    return _Security.SecurityController_dispose()
SecurityController_dispose = _Security.SecurityController_dispose

# This file is compatible with both classic and new-style classes.


