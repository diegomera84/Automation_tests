# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FingerprintReader')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FingerprintReader')
    _FingerprintReader = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FingerprintReader', [dirname(__file__)])
        except ImportError:
            import _FingerprintReader
            return _FingerprintReader
        try:
            _mod = imp.load_module('_FingerprintReader', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FingerprintReader = swig_import_helper()
    del swig_import_helper
else:
    import _FingerprintReader
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FingerprintReader.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _FingerprintReader.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FingerprintReader.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FingerprintReader.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FingerprintReader.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FingerprintReader.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FingerprintReader.SwigPyIterator_copy(self)

    def next(self):
        return _FingerprintReader.SwigPyIterator_next(self)

    def __next__(self):
        return _FingerprintReader.SwigPyIterator___next__(self)

    def previous(self):
        return _FingerprintReader.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FingerprintReader.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FingerprintReader.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FingerprintReader.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FingerprintReader.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FingerprintReader.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FingerprintReader.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FingerprintReader.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FingerprintReader.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _FingerprintReader.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FingerprintReader.vectori___nonzero__(self)

    def __bool__(self):
        return _FingerprintReader.vectori___bool__(self)

    def __len__(self):
        return _FingerprintReader.vectori___len__(self)

    def __getslice__(self, i, j):
        return _FingerprintReader.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FingerprintReader.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FingerprintReader.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FingerprintReader.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FingerprintReader.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FingerprintReader.vectori___setitem__(self, *args)

    def pop(self):
        return _FingerprintReader.vectori_pop(self)

    def append(self, x):
        return _FingerprintReader.vectori_append(self, x)

    def empty(self):
        return _FingerprintReader.vectori_empty(self)

    def size(self):
        return _FingerprintReader.vectori_size(self)

    def swap(self, v):
        return _FingerprintReader.vectori_swap(self, v)

    def begin(self):
        return _FingerprintReader.vectori_begin(self)

    def end(self):
        return _FingerprintReader.vectori_end(self)

    def rbegin(self):
        return _FingerprintReader.vectori_rbegin(self)

    def rend(self):
        return _FingerprintReader.vectori_rend(self)

    def clear(self):
        return _FingerprintReader.vectori_clear(self)

    def get_allocator(self):
        return _FingerprintReader.vectori_get_allocator(self)

    def pop_back(self):
        return _FingerprintReader.vectori_pop_back(self)

    def erase(self, *args):
        return _FingerprintReader.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _FingerprintReader.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _FingerprintReader.vectori_push_back(self, x)

    def front(self):
        return _FingerprintReader.vectori_front(self)

    def back(self):
        return _FingerprintReader.vectori_back(self)

    def assign(self, n, x):
        return _FingerprintReader.vectori_assign(self, n, x)

    def resize(self, *args):
        return _FingerprintReader.vectori_resize(self, *args)

    def insert(self, *args):
        return _FingerprintReader.vectori_insert(self, *args)

    def reserve(self, n):
        return _FingerprintReader.vectori_reserve(self, n)

    def capacity(self):
        return _FingerprintReader.vectori_capacity(self)
    __swig_destroy__ = _FingerprintReader.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _FingerprintReader.vectori_swigregister
vectori_swigregister(vectori)

class ImageInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageInformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imageStatus"] = _FingerprintReader.ImageInformation_imageStatus_set
    __swig_getmethods__["imageStatus"] = _FingerprintReader.ImageInformation_imageStatus_get
    if _newclass:
        imageStatus = _swig_property(_FingerprintReader.ImageInformation_imageStatus_get, _FingerprintReader.ImageInformation_imageStatus_set)
    __swig_setmethods__["image"] = _FingerprintReader.ImageInformation_image_set
    __swig_getmethods__["image"] = _FingerprintReader.ImageInformation_image_get
    if _newclass:
        image = _swig_property(_FingerprintReader.ImageInformation_image_get, _FingerprintReader.ImageInformation_image_set)
    __swig_setmethods__["imageType"] = _FingerprintReader.ImageInformation_imageType_set
    __swig_getmethods__["imageType"] = _FingerprintReader.ImageInformation_imageType_get
    if _newclass:
        imageType = _swig_property(_FingerprintReader.ImageInformation_imageType_get, _FingerprintReader.ImageInformation_imageType_set)
    __swig_setmethods__["detectedFingerCount"] = _FingerprintReader.ImageInformation_detectedFingerCount_set
    __swig_getmethods__["detectedFingerCount"] = _FingerprintReader.ImageInformation_detectedFingerCount_get
    if _newclass:
        detectedFingerCount = _swig_property(_FingerprintReader.ImageInformation_detectedFingerCount_get, _FingerprintReader.ImageInformation_detectedFingerCount_set)
    __swig_setmethods__["segmentImageArray"] = _FingerprintReader.ImageInformation_segmentImageArray_set
    __swig_getmethods__["segmentImageArray"] = _FingerprintReader.ImageInformation_segmentImageArray_get
    if _newclass:
        segmentImageArray = _swig_property(_FingerprintReader.ImageInformation_segmentImageArray_get, _FingerprintReader.ImageInformation_segmentImageArray_set)
    __swig_setmethods__["segmentPositionArray"] = _FingerprintReader.ImageInformation_segmentPositionArray_set
    __swig_getmethods__["segmentPositionArray"] = _FingerprintReader.ImageInformation_segmentPositionArray_get
    if _newclass:
        segmentPositionArray = _swig_property(_FingerprintReader.ImageInformation_segmentPositionArray_get, _FingerprintReader.ImageInformation_segmentPositionArray_set)
    __swig_setmethods__["segmentImageArrayCount"] = _FingerprintReader.ImageInformation_segmentImageArrayCount_set
    __swig_getmethods__["segmentImageArrayCount"] = _FingerprintReader.ImageInformation_segmentImageArrayCount_get
    if _newclass:
        segmentImageArrayCount = _swig_property(_FingerprintReader.ImageInformation_segmentImageArrayCount_get, _FingerprintReader.ImageInformation_segmentImageArrayCount_set)
    __swig_setmethods__["fingerCountState"] = _FingerprintReader.ImageInformation_fingerCountState_set
    __swig_getmethods__["fingerCountState"] = _FingerprintReader.ImageInformation_fingerCountState_get
    if _newclass:
        fingerCountState = _swig_property(_FingerprintReader.ImageInformation_fingerCountState_get, _FingerprintReader.ImageInformation_fingerCountState_set)
    __swig_setmethods__["qualityArray"] = _FingerprintReader.ImageInformation_qualityArray_set
    __swig_getmethods__["qualityArray"] = _FingerprintReader.ImageInformation_qualityArray_get
    if _newclass:
        qualityArray = _swig_property(_FingerprintReader.ImageInformation_qualityArray_get, _FingerprintReader.ImageInformation_qualityArray_set)
    __swig_setmethods__["qualityArrayCount"] = _FingerprintReader.ImageInformation_qualityArrayCount_set
    __swig_getmethods__["qualityArrayCount"] = _FingerprintReader.ImageInformation_qualityArrayCount_get
    if _newclass:
        qualityArrayCount = _swig_property(_FingerprintReader.ImageInformation_qualityArrayCount_get, _FingerprintReader.ImageInformation_qualityArrayCount_set)

    def __init__(self):
        this = _FingerprintReader.new_ImageInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FingerprintReader.delete_ImageInformation
    __del__ = lambda self: None
ImageInformation_swigregister = _FingerprintReader.ImageInformation_swigregister
ImageInformation_swigregister(ImageInformation)

class BitmapData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitmapData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitmapData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _FingerprintReader.BitmapData_data_set
    __swig_getmethods__["data"] = _FingerprintReader.BitmapData_data_get
    if _newclass:
        data = _swig_property(_FingerprintReader.BitmapData_data_get, _FingerprintReader.BitmapData_data_set)
    __swig_setmethods__["width"] = _FingerprintReader.BitmapData_width_set
    __swig_getmethods__["width"] = _FingerprintReader.BitmapData_width_get
    if _newclass:
        width = _swig_property(_FingerprintReader.BitmapData_width_get, _FingerprintReader.BitmapData_width_set)
    __swig_setmethods__["height"] = _FingerprintReader.BitmapData_height_set
    __swig_getmethods__["height"] = _FingerprintReader.BitmapData_height_get
    if _newclass:
        height = _swig_property(_FingerprintReader.BitmapData_height_get, _FingerprintReader.BitmapData_height_set)
    __swig_setmethods__["isFinalFrame"] = _FingerprintReader.BitmapData_isFinalFrame_set
    __swig_getmethods__["isFinalFrame"] = _FingerprintReader.BitmapData_isFinalFrame_get
    if _newclass:
        isFinalFrame = _swig_property(_FingerprintReader.BitmapData_isFinalFrame_get, _FingerprintReader.BitmapData_isFinalFrame_set)
    __swig_setmethods__["isFingerPresent"] = _FingerprintReader.BitmapData_isFingerPresent_set
    __swig_getmethods__["isFingerPresent"] = _FingerprintReader.BitmapData_isFingerPresent_get
    if _newclass:
        isFingerPresent = _swig_property(_FingerprintReader.BitmapData_isFingerPresent_get, _FingerprintReader.BitmapData_isFingerPresent_set)

    def __init__(self):
        this = _FingerprintReader.new_BitmapData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FingerprintReader.delete_BitmapData
    __del__ = lambda self: None
BitmapData_swigregister = _FingerprintReader.BitmapData_swigregister
BitmapData_swigregister(BitmapData)

class IScanController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IScanController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IScanController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FingerprintReader.delete_IScanController
    __del__ = lambda self: None

    def registerCallbacks(self, handle, event, callbackFunction, context):
        return _FingerprintReader.IScanController_registerCallbacks(self, handle, event, callbackFunction, context)

    def getDeviceCount(self, deviceCount):
        return _FingerprintReader.IScanController_getDeviceCount(self, deviceCount)

    def getDeviceDescription(self, deviceIndex, deviceDescription):
        return _FingerprintReader.IScanController_getDeviceDescription(self, deviceIndex, deviceDescription)

    def openDevice(self, deviceIndex, uniformityMaskPath, asynchrnousOpen, handle):
        return _FingerprintReader.IScanController_openDevice(self, deviceIndex, uniformityMaskPath, asynchrnousOpen, handle)

    def beginCaptureImage(self, handle, imageType, imageResolution, captureOptions):
        return _FingerprintReader.IScanController_beginCaptureImage(self, handle, imageType, imageResolution, captureOptions)

    def isCaptureActive(self, handle, isActive):
        return _FingerprintReader.IScanController_isCaptureActive(self, handle, isActive)

    def closeDevice(self, handle):
        return _FingerprintReader.IScanController_closeDevice(self, handle)

    def getRequiredSdkVersion(self, deviceIndex, minSdkVersion):
        return _FingerprintReader.IScanController_getRequiredSdkVersion(self, deviceIndex, minSdkVersion)

    def cancelCaptureImage(self, handle):
        return _FingerprintReader.IScanController_cancelCaptureImage(self, handle)

    def getImage(self, handle, imageInformation):
        return _FingerprintReader.IScanController_getImage(self, handle, imageInformation)
IScanController_swigregister = _FingerprintReader.IScanController_swigregister
IScanController_swigregister(IScanController)

class IBController(IScanController):
    __swig_setmethods__ = {}
    for _s in [IScanController]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBController, name, value)
    __swig_getmethods__ = {}
    for _s in [IScanController]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
IBController_swigregister = _FingerprintReader.IBController_swigregister
IBController_swigregister(IBController)

class FingerprintReaderController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FingerprintReaderController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FingerprintReaderController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getCurrentInstance = staticmethod(_FingerprintReader.FingerprintReaderController_getCurrentInstance)
    else:
        getCurrentInstance = _FingerprintReader.FingerprintReaderController_getCurrentInstance
    if _newclass:
        setLedStatus = staticmethod(_FingerprintReader.FingerprintReaderController_setLedStatus)
    else:
        setLedStatus = _FingerprintReader.FingerprintReaderController_setLedStatus
    if _newclass:
        dispose = staticmethod(_FingerprintReader.FingerprintReaderController_dispose)
    else:
        dispose = _FingerprintReader.FingerprintReaderController_dispose
    __swig_destroy__ = _FingerprintReader.delete_FingerprintReaderController
    __del__ = lambda self: None

    def detect(self):
        return _FingerprintReader.FingerprintReaderController_detect(self)

    def connect(self):
        return _FingerprintReader.FingerprintReaderController_connect(self)

    def disconnect(self):
        return _FingerprintReader.FingerprintReaderController_disconnect(self)

    def isConnected(self):
        return _FingerprintReader.FingerprintReaderController_isConnected(self)

    def getFirmwareVersion(self):
        return _FingerprintReader.FingerprintReaderController_getFirmwareVersion(self)

    def isFingerprintPresent(self):
        return _FingerprintReader.FingerprintReaderController_isFingerprintPresent(self)

    def getFrame(self):
        return _FingerprintReader.FingerprintReaderController_getFrame(self)
FingerprintReaderController_swigregister = _FingerprintReader.FingerprintReaderController_swigregister
FingerprintReaderController_swigregister(FingerprintReaderController)

def FingerprintReaderController_getCurrentInstance(scanController=None):
    return _FingerprintReader.FingerprintReaderController_getCurrentInstance(scanController)
FingerprintReaderController_getCurrentInstance = _FingerprintReader.FingerprintReaderController_getCurrentInstance

def FingerprintReaderController_setLedStatus(greenLedOn, redLedOn):
    return _FingerprintReader.FingerprintReaderController_setLedStatus(greenLedOn, redLedOn)
FingerprintReaderController_setLedStatus = _FingerprintReader.FingerprintReaderController_setLedStatus

def FingerprintReaderController_dispose():
    return _FingerprintReader.FingerprintReaderController_dispose()
FingerprintReaderController_dispose = _FingerprintReader.FingerprintReaderController_dispose

# This file is compatible with both classic and new-style classes.


