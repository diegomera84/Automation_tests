# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PowerSupplyUnit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PowerSupplyUnit')
    _PowerSupplyUnit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PowerSupplyUnit', [dirname(__file__)])
        except ImportError:
            import _PowerSupplyUnit
            return _PowerSupplyUnit
        try:
            _mod = imp.load_module('_PowerSupplyUnit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PowerSupplyUnit = swig_import_helper()
    del swig_import_helper
else:
    import _PowerSupplyUnit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerSupplyUnit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PowerSupplyUnit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PowerSupplyUnit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PowerSupplyUnit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PowerSupplyUnit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PowerSupplyUnit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PowerSupplyUnit.SwigPyIterator_copy(self)

    def next(self):
        return _PowerSupplyUnit.SwigPyIterator_next(self)

    def __next__(self):
        return _PowerSupplyUnit.SwigPyIterator___next__(self)

    def previous(self):
        return _PowerSupplyUnit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PowerSupplyUnit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PowerSupplyUnit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PowerSupplyUnit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PowerSupplyUnit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PowerSupplyUnit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PowerSupplyUnit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PowerSupplyUnit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PowerSupplyUnit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerSupplyUnit.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerSupplyUnit.vectori___nonzero__(self)

    def __bool__(self):
        return _PowerSupplyUnit.vectori___bool__(self)

    def __len__(self):
        return _PowerSupplyUnit.vectori___len__(self)

    def __getslice__(self, i, j):
        return _PowerSupplyUnit.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerSupplyUnit.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerSupplyUnit.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerSupplyUnit.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerSupplyUnit.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerSupplyUnit.vectori___setitem__(self, *args)

    def pop(self):
        return _PowerSupplyUnit.vectori_pop(self)

    def append(self, x):
        return _PowerSupplyUnit.vectori_append(self, x)

    def empty(self):
        return _PowerSupplyUnit.vectori_empty(self)

    def size(self):
        return _PowerSupplyUnit.vectori_size(self)

    def swap(self, v):
        return _PowerSupplyUnit.vectori_swap(self, v)

    def begin(self):
        return _PowerSupplyUnit.vectori_begin(self)

    def end(self):
        return _PowerSupplyUnit.vectori_end(self)

    def rbegin(self):
        return _PowerSupplyUnit.vectori_rbegin(self)

    def rend(self):
        return _PowerSupplyUnit.vectori_rend(self)

    def clear(self):
        return _PowerSupplyUnit.vectori_clear(self)

    def get_allocator(self):
        return _PowerSupplyUnit.vectori_get_allocator(self)

    def pop_back(self):
        return _PowerSupplyUnit.vectori_pop_back(self)

    def erase(self, *args):
        return _PowerSupplyUnit.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _PowerSupplyUnit.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PowerSupplyUnit.vectori_push_back(self, x)

    def front(self):
        return _PowerSupplyUnit.vectori_front(self)

    def back(self):
        return _PowerSupplyUnit.vectori_back(self)

    def assign(self, n, x):
        return _PowerSupplyUnit.vectori_assign(self, n, x)

    def resize(self, *args):
        return _PowerSupplyUnit.vectori_resize(self, *args)

    def insert(self, *args):
        return _PowerSupplyUnit.vectori_insert(self, *args)

    def reserve(self, n):
        return _PowerSupplyUnit.vectori_reserve(self, n)

    def capacity(self):
        return _PowerSupplyUnit.vectori_capacity(self)
    __swig_destroy__ = _PowerSupplyUnit.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _PowerSupplyUnit.vectori_swigregister
vectori_swigregister(vectori)

LogLevel_LERROR = _PowerSupplyUnit.LogLevel_LERROR
LogLevel_LWARNING = _PowerSupplyUnit.LogLevel_LWARNING
LogLevel_LDEBUG = _PowerSupplyUnit.LogLevel_LDEBUG
LogLevel_LVERBOSE = _PowerSupplyUnit.LogLevel_LVERBOSE

def logLevelToString(logLevel):
    return _PowerSupplyUnit.logLevelToString(logLevel)
logLevelToString = _PowerSupplyUnit.logLevelToString

def getDate():
    return _PowerSupplyUnit.getDate()
getDate = _PowerSupplyUnit.getDate

def parseFuncName(longFunc, shortFunc):
    return _PowerSupplyUnit.parseFuncName(longFunc, shortFunc)
parseFuncName = _PowerSupplyUnit.parseFuncName

def setThreadName(tid, name):
    return _PowerSupplyUnit.setThreadName(tid, name)
setThreadName = _PowerSupplyUnit.setThreadName

def getThreadName(tid):
    return _PowerSupplyUnit.getThreadName(tid)
getThreadName = _PowerSupplyUnit.getThreadName
class TextFileLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFileLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextFileLogger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_PowerSupplyUnit.TextFileLogger_getInstance)
    else:
        getInstance = _PowerSupplyUnit.TextFileLogger_getInstance
    __swig_destroy__ = _PowerSupplyUnit.delete_TextFileLogger
    __del__ = lambda self: None

    def setLogLevel(self, logLevel):
        return _PowerSupplyUnit.TextFileLogger_setLogLevel(self, logLevel)

    def setLogFilename(self, name):
        return _PowerSupplyUnit.TextFileLogger_setLogFilename(self, name)

    def getLogLevel(self):
        return _PowerSupplyUnit.TextFileLogger_getLogLevel(self)

    def getLogFilename(self):
        return _PowerSupplyUnit.TextFileLogger_getLogFilename(self)

    def writeLogMessage(self, ss):
        return _PowerSupplyUnit.TextFileLogger_writeLogMessage(self, ss)

    def enableStdOut(self, enable):
        return _PowerSupplyUnit.TextFileLogger_enableStdOut(self, enable)

    def stdoutEnabled(self):
        return _PowerSupplyUnit.TextFileLogger_stdoutEnabled(self)

    def setOpenMode(self, mode):
        return _PowerSupplyUnit.TextFileLogger_setOpenMode(self, mode)
TextFileLogger_swigregister = _PowerSupplyUnit.TextFileLogger_swigregister
TextFileLogger_swigregister(TextFileLogger)

def TextFileLogger_getInstance():
    return _PowerSupplyUnit.TextFileLogger_getInstance()
TextFileLogger_getInstance = _PowerSupplyUnit.TextFileLogger_getInstance

class ILibUsb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILibUsb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILibUsb, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerSupplyUnit.delete_ILibUsb
    __del__ = lambda self: None

    def initialize(self, context):
        return _PowerSupplyUnit.ILibUsb_initialize(self, context)

    def setDebug(self, context, level):
        return _PowerSupplyUnit.ILibUsb_setDebug(self, context, level)

    def openDeviceWithVidPid(self, context, vendorId, productId):
        return _PowerSupplyUnit.ILibUsb_openDeviceWithVidPid(self, context, vendorId, productId)

    def isKernelDriverActive(self, handle, interfaceNumber):
        return _PowerSupplyUnit.ILibUsb_isKernelDriverActive(self, handle, interfaceNumber)

    def detachKernelDriver(self, handle, interfaceNumber):
        return _PowerSupplyUnit.ILibUsb_detachKernelDriver(self, handle, interfaceNumber)

    def claimInterface(self, handle, interfaceNumber):
        return _PowerSupplyUnit.ILibUsb_claimInterface(self, handle, interfaceNumber)

    def bulkTransfer(self, handle, endpoint, data, length, actualLength, timeout):
        return _PowerSupplyUnit.ILibUsb_bulkTransfer(self, handle, endpoint, data, length, actualLength, timeout)

    def releaseInterface(self, handle, interfaceNumber):
        return _PowerSupplyUnit.ILibUsb_releaseInterface(self, handle, interfaceNumber)

    def getErrorMessage(self, errorCode):
        return _PowerSupplyUnit.ILibUsb_getErrorMessage(self, errorCode)

    def close(self, handle):
        return _PowerSupplyUnit.ILibUsb_close(self, handle)

    def exit(self, context):
        return _PowerSupplyUnit.ILibUsb_exit(self, context)
ILibUsb_swigregister = _PowerSupplyUnit.ILibUsb_swigregister
ILibUsb_swigregister(ILibUsb)

class DeviceEventsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceEventsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceEventsManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getCurrentInstance = staticmethod(_PowerSupplyUnit.DeviceEventsManager_getCurrentInstance)
    else:
        getCurrentInstance = _PowerSupplyUnit.DeviceEventsManager_getCurrentInstance
    if _newclass:
        dispose = staticmethod(_PowerSupplyUnit.DeviceEventsManager_dispose)
    else:
        dispose = _PowerSupplyUnit.DeviceEventsManager_dispose
    __swig_destroy__ = _PowerSupplyUnit.delete_DeviceEventsManager
    __del__ = lambda self: None

    def startUdevMonitor(self):
        return _PowerSupplyUnit.DeviceEventsManager_startUdevMonitor(self)

    def stopUdevMonitor(self):
        return _PowerSupplyUnit.DeviceEventsManager_stopUdevMonitor(self)

    def signalEventDetected(self):
        return _PowerSupplyUnit.DeviceEventsManager_signalEventDetected(self)
DeviceEventsManager_swigregister = _PowerSupplyUnit.DeviceEventsManager_swigregister
DeviceEventsManager_swigregister(DeviceEventsManager)

def DeviceEventsManager_getCurrentInstance(udevMonitor=None):
    return _PowerSupplyUnit.DeviceEventsManager_getCurrentInstance(udevMonitor)
DeviceEventsManager_getCurrentInstance = _PowerSupplyUnit.DeviceEventsManager_getCurrentInstance

def DeviceEventsManager_dispose():
    return _PowerSupplyUnit.DeviceEventsManager_dispose()
DeviceEventsManager_dispose = _PowerSupplyUnit.DeviceEventsManager_dispose

class IHidApi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IHidApi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IHidApi, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerSupplyUnit.delete_IHidApi
    __del__ = lambda self: None

    def init(self):
        return _PowerSupplyUnit.IHidApi_init(self)

    def hopenm(self, vendorId, productId, serialNumber):
        return _PowerSupplyUnit.IHidApi_hopenm(self, vendorId, productId, serialNumber)

    def close(self, device):
        return _PowerSupplyUnit.IHidApi_close(self, device)

    def write(self, device, data, length):
        return _PowerSupplyUnit.IHidApi_write(self, device, data, length)

    def hreadm(self, device, data, length):
        return _PowerSupplyUnit.IHidApi_hreadm(self, device, data, length)
IHidApi_swigregister = _PowerSupplyUnit.IHidApi_swigregister
IHidApi_swigregister(IHidApi)

class HidPsu(IHidApi):
    __swig_setmethods__ = {}
    for _s in [IHidApi]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HidPsu, name, value)
    __swig_getmethods__ = {}
    for _s in [IHidApi]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HidPsu, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerSupplyUnit.delete_HidPsu
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PowerSupplyUnit.new_HidPsu(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self):
        return _PowerSupplyUnit.HidPsu_init(self)

    def hopenm(self, vendorId, productId, serialNumber):
        return _PowerSupplyUnit.HidPsu_hopenm(self, vendorId, productId, serialNumber)

    def close(self, device):
        return _PowerSupplyUnit.HidPsu_close(self, device)

    def write(self, device, data, length):
        return _PowerSupplyUnit.HidPsu_write(self, device, data, length)

    def hreadm(self, device, data, length):
        return _PowerSupplyUnit.HidPsu_hreadm(self, device, data, length)
HidPsu_swigregister = _PowerSupplyUnit.HidPsu_swigregister
HidPsu_swigregister(HidPsu)

BatteryLevel_NONE = _PowerSupplyUnit.BatteryLevel_NONE
BatteryLevel_CRITICAL = _PowerSupplyUnit.BatteryLevel_CRITICAL
BatteryLevel_LOW = _PowerSupplyUnit.BatteryLevel_LOW
BatteryLevel_HIGH = _PowerSupplyUnit.BatteryLevel_HIGH
BatteryLevel_FULL = _PowerSupplyUnit.BatteryLevel_FULL
ActivePsu_AC = _PowerSupplyUnit.ActivePsu_AC
ActivePsu_EXTERNAL = _PowerSupplyUnit.ActivePsu_EXTERNAL
ActivePsu_INTERNAL = _PowerSupplyUnit.ActivePsu_INTERNAL
class BatteryState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatteryState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatteryState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["percentage"] = _PowerSupplyUnit.BatteryState_percentage_set
    __swig_getmethods__["percentage"] = _PowerSupplyUnit.BatteryState_percentage_get
    if _newclass:
        percentage = _swig_property(_PowerSupplyUnit.BatteryState_percentage_get, _PowerSupplyUnit.BatteryState_percentage_set)
    __swig_setmethods__["level"] = _PowerSupplyUnit.BatteryState_level_set
    __swig_getmethods__["level"] = _PowerSupplyUnit.BatteryState_level_get
    if _newclass:
        level = _swig_property(_PowerSupplyUnit.BatteryState_level_get, _PowerSupplyUnit.BatteryState_level_set)
    __swig_setmethods__["voltage"] = _PowerSupplyUnit.BatteryState_voltage_set
    __swig_getmethods__["voltage"] = _PowerSupplyUnit.BatteryState_voltage_get
    if _newclass:
        voltage = _swig_property(_PowerSupplyUnit.BatteryState_voltage_get, _PowerSupplyUnit.BatteryState_voltage_set)
    __swig_setmethods__["current"] = _PowerSupplyUnit.BatteryState_current_set
    __swig_getmethods__["current"] = _PowerSupplyUnit.BatteryState_current_get
    if _newclass:
        current = _swig_property(_PowerSupplyUnit.BatteryState_current_get, _PowerSupplyUnit.BatteryState_current_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_BatteryState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_BatteryState
    __del__ = lambda self: None
BatteryState_swigregister = _PowerSupplyUnit.BatteryState_swigregister
BatteryState_swigregister(BatteryState)

class PsuOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["main"] = _PowerSupplyUnit.PsuOutput_main_set
    __swig_getmethods__["main"] = _PowerSupplyUnit.PsuOutput_main_get
    if _newclass:
        main = _swig_property(_PowerSupplyUnit.PsuOutput_main_get, _PowerSupplyUnit.PsuOutput_main_set)
    __swig_setmethods__["v12"] = _PowerSupplyUnit.PsuOutput_v12_set
    __swig_getmethods__["v12"] = _PowerSupplyUnit.PsuOutput_v12_get
    if _newclass:
        v12 = _swig_property(_PowerSupplyUnit.PsuOutput_v12_get, _PowerSupplyUnit.PsuOutput_v12_set)
    __swig_setmethods__["v24"] = _PowerSupplyUnit.PsuOutput_v24_set
    __swig_getmethods__["v24"] = _PowerSupplyUnit.PsuOutput_v24_get
    if _newclass:
        v24 = _swig_property(_PowerSupplyUnit.PsuOutput_v24_get, _PowerSupplyUnit.PsuOutput_v24_set)
    __swig_setmethods__["tm"] = _PowerSupplyUnit.PsuOutput_tm_set
    __swig_getmethods__["tm"] = _PowerSupplyUnit.PsuOutput_tm_get
    if _newclass:
        tm = _swig_property(_PowerSupplyUnit.PsuOutput_tm_get, _PowerSupplyUnit.PsuOutput_tm_set)
    __swig_setmethods__["printer"] = _PowerSupplyUnit.PsuOutput_printer_set
    __swig_getmethods__["printer"] = _PowerSupplyUnit.PsuOutput_printer_get
    if _newclass:
        printer = _swig_property(_PowerSupplyUnit.PsuOutput_printer_get, _PowerSupplyUnit.PsuOutput_printer_set)
    __swig_setmethods__["other"] = _PowerSupplyUnit.PsuOutput_other_set
    __swig_getmethods__["other"] = _PowerSupplyUnit.PsuOutput_other_get
    if _newclass:
        other = _swig_property(_PowerSupplyUnit.PsuOutput_other_get, _PowerSupplyUnit.PsuOutput_other_set)
    __swig_setmethods__["enable"] = _PowerSupplyUnit.PsuOutput_enable_set
    __swig_getmethods__["enable"] = _PowerSupplyUnit.PsuOutput_enable_get
    if _newclass:
        enable = _swig_property(_PowerSupplyUnit.PsuOutput_enable_get, _PowerSupplyUnit.PsuOutput_enable_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_PsuOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuOutput
    __del__ = lambda self: None
PsuOutput_swigregister = _PowerSupplyUnit.PsuOutput_swigregister
PsuOutput_swigregister(PsuOutput)

class PsuState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ac"] = _PowerSupplyUnit.PsuState_ac_set
    __swig_getmethods__["ac"] = _PowerSupplyUnit.PsuState_ac_get
    if _newclass:
        ac = _swig_property(_PowerSupplyUnit.PsuState_ac_get, _PowerSupplyUnit.PsuState_ac_set)
    __swig_setmethods__["external"] = _PowerSupplyUnit.PsuState_external_set
    __swig_getmethods__["external"] = _PowerSupplyUnit.PsuState_external_get
    if _newclass:
        external = _swig_property(_PowerSupplyUnit.PsuState_external_get, _PowerSupplyUnit.PsuState_external_set)
    __swig_setmethods__["internal"] = _PowerSupplyUnit.PsuState_internal_set
    __swig_getmethods__["internal"] = _PowerSupplyUnit.PsuState_internal_get
    if _newclass:
        internal = _swig_property(_PowerSupplyUnit.PsuState_internal_get, _PowerSupplyUnit.PsuState_internal_set)
    __swig_setmethods__["key"] = _PowerSupplyUnit.PsuState_key_set
    __swig_getmethods__["key"] = _PowerSupplyUnit.PsuState_key_get
    if _newclass:
        key = _swig_property(_PowerSupplyUnit.PsuState_key_get, _PowerSupplyUnit.PsuState_key_set)
    __swig_setmethods__["charger"] = _PowerSupplyUnit.PsuState_charger_set
    __swig_getmethods__["charger"] = _PowerSupplyUnit.PsuState_charger_get
    if _newclass:
        charger = _swig_property(_PowerSupplyUnit.PsuState_charger_get, _PowerSupplyUnit.PsuState_charger_set)
    __swig_setmethods__["valid"] = _PowerSupplyUnit.PsuState_valid_set
    __swig_getmethods__["valid"] = _PowerSupplyUnit.PsuState_valid_get
    if _newclass:
        valid = _swig_property(_PowerSupplyUnit.PsuState_valid_get, _PowerSupplyUnit.PsuState_valid_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_PsuState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuState
    __del__ = lambda self: None
PsuState_swigregister = _PowerSupplyUnit.PsuState_swigregister
PsuState_swigregister(PsuState)

class PsuLED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuLED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuLED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["green_ac"] = _PowerSupplyUnit.PsuLED_green_ac_set
    __swig_getmethods__["green_ac"] = _PowerSupplyUnit.PsuLED_green_ac_get
    if _newclass:
        green_ac = _swig_property(_PowerSupplyUnit.PsuLED_green_ac_get, _PowerSupplyUnit.PsuLED_green_ac_set)
    __swig_setmethods__["yellow_external"] = _PowerSupplyUnit.PsuLED_yellow_external_set
    __swig_getmethods__["yellow_external"] = _PowerSupplyUnit.PsuLED_yellow_external_get
    if _newclass:
        yellow_external = _swig_property(_PowerSupplyUnit.PsuLED_yellow_external_get, _PowerSupplyUnit.PsuLED_yellow_external_set)
    __swig_setmethods__["green_internal"] = _PowerSupplyUnit.PsuLED_green_internal_set
    __swig_getmethods__["green_internal"] = _PowerSupplyUnit.PsuLED_green_internal_get
    if _newclass:
        green_internal = _swig_property(_PowerSupplyUnit.PsuLED_green_internal_get, _PowerSupplyUnit.PsuLED_green_internal_set)
    __swig_setmethods__["red_internal"] = _PowerSupplyUnit.PsuLED_red_internal_set
    __swig_getmethods__["red_internal"] = _PowerSupplyUnit.PsuLED_red_internal_get
    if _newclass:
        red_internal = _swig_property(_PowerSupplyUnit.PsuLED_red_internal_get, _PowerSupplyUnit.PsuLED_red_internal_set)
    __swig_setmethods__["state"] = _PowerSupplyUnit.PsuLED_state_set
    __swig_getmethods__["state"] = _PowerSupplyUnit.PsuLED_state_get
    if _newclass:
        state = _swig_property(_PowerSupplyUnit.PsuLED_state_get, _PowerSupplyUnit.PsuLED_state_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_PsuLED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuLED
    __del__ = lambda self: None
PsuLED_swigregister = _PowerSupplyUnit.PsuLED_swigregister
PsuLED_swigregister(PsuLED)

class PsuError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["output_main"] = _PowerSupplyUnit.PsuError_output_main_set
    __swig_getmethods__["output_main"] = _PowerSupplyUnit.PsuError_output_main_get
    if _newclass:
        output_main = _swig_property(_PowerSupplyUnit.PsuError_output_main_get, _PowerSupplyUnit.PsuError_output_main_set)
    __swig_setmethods__["output_12v"] = _PowerSupplyUnit.PsuError_output_12v_set
    __swig_getmethods__["output_12v"] = _PowerSupplyUnit.PsuError_output_12v_get
    if _newclass:
        output_12v = _swig_property(_PowerSupplyUnit.PsuError_output_12v_get, _PowerSupplyUnit.PsuError_output_12v_set)
    __swig_setmethods__["output_24v"] = _PowerSupplyUnit.PsuError_output_24v_set
    __swig_getmethods__["output_24v"] = _PowerSupplyUnit.PsuError_output_24v_get
    if _newclass:
        output_24v = _swig_property(_PowerSupplyUnit.PsuError_output_24v_get, _PowerSupplyUnit.PsuError_output_24v_set)
    __swig_setmethods__["output_tm"] = _PowerSupplyUnit.PsuError_output_tm_set
    __swig_getmethods__["output_tm"] = _PowerSupplyUnit.PsuError_output_tm_get
    if _newclass:
        output_tm = _swig_property(_PowerSupplyUnit.PsuError_output_tm_get, _PowerSupplyUnit.PsuError_output_tm_set)
    __swig_setmethods__["output_printer"] = _PowerSupplyUnit.PsuError_output_printer_set
    __swig_getmethods__["output_printer"] = _PowerSupplyUnit.PsuError_output_printer_get
    if _newclass:
        output_printer = _swig_property(_PowerSupplyUnit.PsuError_output_printer_get, _PowerSupplyUnit.PsuError_output_printer_set)
    __swig_setmethods__["output_other"] = _PowerSupplyUnit.PsuError_output_other_set
    __swig_getmethods__["output_other"] = _PowerSupplyUnit.PsuError_output_other_get
    if _newclass:
        output_other = _swig_property(_PowerSupplyUnit.PsuError_output_other_get, _PowerSupplyUnit.PsuError_output_other_set)
    __swig_setmethods__["status"] = _PowerSupplyUnit.PsuError_status_set
    __swig_getmethods__["status"] = _PowerSupplyUnit.PsuError_status_get
    if _newclass:
        status = _swig_property(_PowerSupplyUnit.PsuError_status_get, _PowerSupplyUnit.PsuError_status_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_PsuError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuError
    __del__ = lambda self: None
PsuError_swigregister = _PowerSupplyUnit.PsuError_swigregister
PsuError_swigregister(PsuError)

class PsuStateInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuStateInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuStateInformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active"] = _PowerSupplyUnit.PsuStateInformation_active_set
    __swig_getmethods__["active"] = _PowerSupplyUnit.PsuStateInformation_active_get
    if _newclass:
        active = _swig_property(_PowerSupplyUnit.PsuStateInformation_active_get, _PowerSupplyUnit.PsuStateInformation_active_set)
    __swig_setmethods__["key_time_sec"] = _PowerSupplyUnit.PsuStateInformation_key_time_sec_set
    __swig_getmethods__["key_time_sec"] = _PowerSupplyUnit.PsuStateInformation_key_time_sec_get
    if _newclass:
        key_time_sec = _swig_property(_PowerSupplyUnit.PsuStateInformation_key_time_sec_get, _PowerSupplyUnit.PsuStateInformation_key_time_sec_set)
    __swig_setmethods__["ac_voltage"] = _PowerSupplyUnit.PsuStateInformation_ac_voltage_set
    __swig_getmethods__["ac_voltage"] = _PowerSupplyUnit.PsuStateInformation_ac_voltage_get
    if _newclass:
        ac_voltage = _swig_property(_PowerSupplyUnit.PsuStateInformation_ac_voltage_get, _PowerSupplyUnit.PsuStateInformation_ac_voltage_set)
    __swig_setmethods__["temperature1"] = _PowerSupplyUnit.PsuStateInformation_temperature1_set
    __swig_getmethods__["temperature1"] = _PowerSupplyUnit.PsuStateInformation_temperature1_get
    if _newclass:
        temperature1 = _swig_property(_PowerSupplyUnit.PsuStateInformation_temperature1_get, _PowerSupplyUnit.PsuStateInformation_temperature1_set)
    __swig_setmethods__["temperature2"] = _PowerSupplyUnit.PsuStateInformation_temperature2_set
    __swig_getmethods__["temperature2"] = _PowerSupplyUnit.PsuStateInformation_temperature2_get
    if _newclass:
        temperature2 = _swig_property(_PowerSupplyUnit.PsuStateInformation_temperature2_get, _PowerSupplyUnit.PsuStateInformation_temperature2_set)
    __swig_setmethods__["temperature3"] = _PowerSupplyUnit.PsuStateInformation_temperature3_set
    __swig_getmethods__["temperature3"] = _PowerSupplyUnit.PsuStateInformation_temperature3_get
    if _newclass:
        temperature3 = _swig_property(_PowerSupplyUnit.PsuStateInformation_temperature3_get, _PowerSupplyUnit.PsuStateInformation_temperature3_set)
    __swig_setmethods__["acdc_voltage"] = _PowerSupplyUnit.PsuStateInformation_acdc_voltage_set
    __swig_getmethods__["acdc_voltage"] = _PowerSupplyUnit.PsuStateInformation_acdc_voltage_get
    if _newclass:
        acdc_voltage = _swig_property(_PowerSupplyUnit.PsuStateInformation_acdc_voltage_get, _PowerSupplyUnit.PsuStateInformation_acdc_voltage_set)
    __swig_setmethods__["main_voltage"] = _PowerSupplyUnit.PsuStateInformation_main_voltage_set
    __swig_getmethods__["main_voltage"] = _PowerSupplyUnit.PsuStateInformation_main_voltage_get
    if _newclass:
        main_voltage = _swig_property(_PowerSupplyUnit.PsuStateInformation_main_voltage_get, _PowerSupplyUnit.PsuStateInformation_main_voltage_set)
    __swig_setmethods__["signature"] = _PowerSupplyUnit.PsuStateInformation_signature_set
    __swig_getmethods__["signature"] = _PowerSupplyUnit.PsuStateInformation_signature_get
    if _newclass:
        signature = _swig_property(_PowerSupplyUnit.PsuStateInformation_signature_get, _PowerSupplyUnit.PsuStateInformation_signature_set)
    __swig_setmethods__["version"] = _PowerSupplyUnit.PsuStateInformation_version_set
    __swig_getmethods__["version"] = _PowerSupplyUnit.PsuStateInformation_version_get
    if _newclass:
        version = _swig_property(_PowerSupplyUnit.PsuStateInformation_version_get, _PowerSupplyUnit.PsuStateInformation_version_set)
    __swig_setmethods__["key_time_running_sec"] = _PowerSupplyUnit.PsuStateInformation_key_time_running_sec_set
    __swig_getmethods__["key_time_running_sec"] = _PowerSupplyUnit.PsuStateInformation_key_time_running_sec_get
    if _newclass:
        key_time_running_sec = _swig_property(_PowerSupplyUnit.PsuStateInformation_key_time_running_sec_get, _PowerSupplyUnit.PsuStateInformation_key_time_running_sec_set)
    __swig_setmethods__["output_main_disable_time_sec"] = _PowerSupplyUnit.PsuStateInformation_output_main_disable_time_sec_set
    __swig_getmethods__["output_main_disable_time_sec"] = _PowerSupplyUnit.PsuStateInformation_output_main_disable_time_sec_get
    if _newclass:
        output_main_disable_time_sec = _swig_property(_PowerSupplyUnit.PsuStateInformation_output_main_disable_time_sec_get, _PowerSupplyUnit.PsuStateInformation_output_main_disable_time_sec_set)
    __swig_setmethods__["output"] = _PowerSupplyUnit.PsuStateInformation_output_set
    __swig_getmethods__["output"] = _PowerSupplyUnit.PsuStateInformation_output_get
    if _newclass:
        output = _swig_property(_PowerSupplyUnit.PsuStateInformation_output_get, _PowerSupplyUnit.PsuStateInformation_output_set)
    __swig_setmethods__["state"] = _PowerSupplyUnit.PsuStateInformation_state_set
    __swig_getmethods__["state"] = _PowerSupplyUnit.PsuStateInformation_state_get
    if _newclass:
        state = _swig_property(_PowerSupplyUnit.PsuStateInformation_state_get, _PowerSupplyUnit.PsuStateInformation_state_set)
    __swig_setmethods__["led"] = _PowerSupplyUnit.PsuStateInformation_led_set
    __swig_getmethods__["led"] = _PowerSupplyUnit.PsuStateInformation_led_get
    if _newclass:
        led = _swig_property(_PowerSupplyUnit.PsuStateInformation_led_get, _PowerSupplyUnit.PsuStateInformation_led_set)
    __swig_setmethods__["externalBattery"] = _PowerSupplyUnit.PsuStateInformation_externalBattery_set
    __swig_getmethods__["externalBattery"] = _PowerSupplyUnit.PsuStateInformation_externalBattery_get
    if _newclass:
        externalBattery = _swig_property(_PowerSupplyUnit.PsuStateInformation_externalBattery_get, _PowerSupplyUnit.PsuStateInformation_externalBattery_set)
    __swig_setmethods__["internalBattery"] = _PowerSupplyUnit.PsuStateInformation_internalBattery_set
    __swig_getmethods__["internalBattery"] = _PowerSupplyUnit.PsuStateInformation_internalBattery_get
    if _newclass:
        internalBattery = _swig_property(_PowerSupplyUnit.PsuStateInformation_internalBattery_get, _PowerSupplyUnit.PsuStateInformation_internalBattery_set)
    __swig_setmethods__["error"] = _PowerSupplyUnit.PsuStateInformation_error_set
    __swig_getmethods__["error"] = _PowerSupplyUnit.PsuStateInformation_error_get
    if _newclass:
        error = _swig_property(_PowerSupplyUnit.PsuStateInformation_error_get, _PowerSupplyUnit.PsuStateInformation_error_set)

    def __init__(self):
        this = _PowerSupplyUnit.new_PsuStateInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuStateInformation
    __del__ = lambda self: None
PsuStateInformation_swigregister = _PowerSupplyUnit.PsuStateInformation_swigregister
PsuStateInformation_swigregister(PsuStateInformation)

PsuCommand_SET = _PowerSupplyUnit.PsuCommand_SET
PsuCommand_STATUS = _PowerSupplyUnit.PsuCommand_STATUS
class Psu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Psu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Psu, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PowerSupplyUnit.new_Psu(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PowerSupplyUnit.delete_Psu
    __del__ = lambda self: None

    def initialize(self):
        return _PowerSupplyUnit.Psu_initialize(self)

    def finish(self):
        return _PowerSupplyUnit.Psu_finish(self)

    def getPsuStatus(self, state):
        return _PowerSupplyUnit.Psu_getPsuStatus(self, state)

    def setPsu(self, state):
        return _PowerSupplyUnit.Psu_setPsu(self, state)
Psu_swigregister = _PowerSupplyUnit.Psu_swigregister
Psu_swigregister(Psu)

class PsuController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsuController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsuController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getCurrentInstance = staticmethod(_PowerSupplyUnit.PsuController_getCurrentInstance)
    else:
        getCurrentInstance = _PowerSupplyUnit.PsuController_getCurrentInstance
    __swig_destroy__ = _PowerSupplyUnit.delete_PsuController
    __del__ = lambda self: None

    def initialize(self):
        return _PowerSupplyUnit.PsuController_initialize(self)

    def finalize(self):
        return _PowerSupplyUnit.PsuController_finalize(self)

    def isInitialized(self):
        return _PowerSupplyUnit.PsuController_isInitialized(self)

    def updateState(self):
        return _PowerSupplyUnit.PsuController_updateState(self)

    def isKeyPressed(self):
        return _PowerSupplyUnit.PsuController_isKeyPressed(self)

    def getKeyTimeSeconds(self):
        return _PowerSupplyUnit.PsuController_getKeyTimeSeconds(self)

    def isAcPresent(self):
        return _PowerSupplyUnit.PsuController_isAcPresent(self)

    def isAcUsed(self):
        return _PowerSupplyUnit.PsuController_isAcUsed(self)

    def getAcVoltage(self):
        return _PowerSupplyUnit.PsuController_getAcVoltage(self)

    def getAcDcVoltage(self):
        return _PowerSupplyUnit.PsuController_getAcDcVoltage(self)

    def getMainVoltage(self):
        return _PowerSupplyUnit.PsuController_getMainVoltage(self)

    def isExternalBatteryPresent(self):
        return _PowerSupplyUnit.PsuController_isExternalBatteryPresent(self)

    def isExternalBatteryUsed(self):
        return _PowerSupplyUnit.PsuController_isExternalBatteryUsed(self)

    def getExternalBatteryVoltage(self):
        return _PowerSupplyUnit.PsuController_getExternalBatteryVoltage(self)

    def getExternalBatteryCurrent(self):
        return _PowerSupplyUnit.PsuController_getExternalBatteryCurrent(self)

    def getExternalBatteryPercentage(self):
        return _PowerSupplyUnit.PsuController_getExternalBatteryPercentage(self)

    def getExternalBatteryLevel(self):
        return _PowerSupplyUnit.PsuController_getExternalBatteryLevel(self)

    def isInternalBatteryPresent(self):
        return _PowerSupplyUnit.PsuController_isInternalBatteryPresent(self)

    def isInternalBatteryUsed(self):
        return _PowerSupplyUnit.PsuController_isInternalBatteryUsed(self)

    def getInternalBatteryVoltage(self):
        return _PowerSupplyUnit.PsuController_getInternalBatteryVoltage(self)

    def getInternalBatteryCurrent(self):
        return _PowerSupplyUnit.PsuController_getInternalBatteryCurrent(self)

    def getInternalBatteryPercentage(self):
        return _PowerSupplyUnit.PsuController_getInternalBatteryPercentage(self)

    def getInternalBatteryLevel(self):
        return _PowerSupplyUnit.PsuController_getInternalBatteryLevel(self)

    def getVersion(self):
        return _PowerSupplyUnit.PsuController_getVersion(self)

    def getRemainingSecondsToShutdown(self):
        return _PowerSupplyUnit.PsuController_getRemainingSecondsToShutdown(self)

    def isRedLedOn(self):
        return _PowerSupplyUnit.PsuController_isRedLedOn(self)

    def setShutdownTimeout(self, seconds):
        return _PowerSupplyUnit.PsuController_setShutdownTimeout(self, seconds)

    def setMainPowerState(self, state):
        return _PowerSupplyUnit.PsuController_setMainPowerState(self, state)

    def setPrinterPowerState(self, state):
        return _PowerSupplyUnit.PsuController_setPrinterPowerState(self, state)

    def setTMPowerState(self, state):
        return _PowerSupplyUnit.PsuController_setTMPowerState(self, state)

    def set12VPowerState(self, state):
        return _PowerSupplyUnit.PsuController_set12VPowerState(self, state)

    def set24VPowerState(self, state):
        return _PowerSupplyUnit.PsuController_set24VPowerState(self, state)

    def setMainPowerDisableTime(self, timeSeconds):
        return _PowerSupplyUnit.PsuController_setMainPowerDisableTime(self, timeSeconds)
PsuController_swigregister = _PowerSupplyUnit.PsuController_swigregister
PsuController_swigregister(PsuController)

def PsuController_getCurrentInstance(psu=None):
    return _PowerSupplyUnit.PsuController_getCurrentInstance(psu)
PsuController_getCurrentInstance = _PowerSupplyUnit.PsuController_getCurrentInstance

# This file is compatible with both classic and new-style classes.


